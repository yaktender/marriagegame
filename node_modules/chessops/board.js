"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Board = void 0;
const types_1 = require("./types");
const squareSet_1 = require("./squareSet");
class Board {
    constructor() { }
    static default() {
        const board = new Board();
        board.reset();
        return board;
    }
    static racingKings() {
        const board = new Board();
        board.occupied = new squareSet_1.SquareSet(0xffff, 0);
        board.promoted = squareSet_1.SquareSet.empty();
        board.white = new squareSet_1.SquareSet(0xf0f0, 0);
        board.black = new squareSet_1.SquareSet(0x0f0f, 0);
        board.pawn = squareSet_1.SquareSet.empty();
        board.knight = new squareSet_1.SquareSet(0x1818, 0);
        board.bishop = new squareSet_1.SquareSet(0x2424, 0);
        board.rook = new squareSet_1.SquareSet(0x4242, 0);
        board.queen = new squareSet_1.SquareSet(0x0081, 0);
        board.king = new squareSet_1.SquareSet(0x8100, 0);
        return board;
    }
    static horde() {
        const board = new Board();
        board.occupied = new squareSet_1.SquareSet(4294967295, 4294901862);
        board.promoted = squareSet_1.SquareSet.empty();
        board.white = new squareSet_1.SquareSet(4294967295, 102);
        board.black = new squareSet_1.SquareSet(0, 4294901760);
        board.pawn = new squareSet_1.SquareSet(4294967295, 16711782);
        board.knight = new squareSet_1.SquareSet(0, 1107296256);
        board.bishop = new squareSet_1.SquareSet(0, 603979776);
        board.rook = new squareSet_1.SquareSet(0, 2164260864);
        board.queen = new squareSet_1.SquareSet(0, 134217728);
        board.king = new squareSet_1.SquareSet(0, 268435456);
        return board;
    }
    reset() {
        this.occupied = new squareSet_1.SquareSet(0xffff, 4294901760);
        this.promoted = squareSet_1.SquareSet.empty();
        this.white = new squareSet_1.SquareSet(0xffff, 0);
        this.black = new squareSet_1.SquareSet(0, 4294901760);
        this.pawn = new squareSet_1.SquareSet(0xff00, 16711680);
        this.knight = new squareSet_1.SquareSet(0x42, 1107296256);
        this.bishop = new squareSet_1.SquareSet(0x24, 603979776);
        this.rook = new squareSet_1.SquareSet(0x81, 2164260864);
        this.queen = new squareSet_1.SquareSet(0x8, 134217728);
        this.king = new squareSet_1.SquareSet(0x10, 268435456);
    }
    static empty() {
        const board = new Board();
        board.clear();
        return board;
    }
    clear() {
        this.occupied = squareSet_1.SquareSet.empty();
        this.promoted = squareSet_1.SquareSet.empty();
        for (const color of types_1.COLORS)
            this[color] = squareSet_1.SquareSet.empty();
        for (const role of types_1.ROLES)
            this[role] = squareSet_1.SquareSet.empty();
    }
    clone() {
        const board = new Board();
        board.occupied = this.occupied;
        board.promoted = this.promoted;
        for (const color of types_1.COLORS)
            board[color] = this[color];
        for (const role of types_1.ROLES)
            board[role] = this[role];
        return board;
    }
    equalsIgnorePromoted(other) {
        if (!this.white.equals(other.white))
            return false;
        return types_1.ROLES.every(role => this[role].equals(other[role]));
    }
    equals(other) {
        return this.equalsIgnorePromoted(other) && this.promoted.equals(other.promoted);
    }
    getColor(square) {
        if (this.white.has(square))
            return 'white';
        if (this.black.has(square))
            return 'black';
        return;
    }
    getRole(square) {
        for (const role of types_1.ROLES) {
            if (this[role].has(square))
                return role;
        }
        return;
    }
    get(square) {
        const color = this.getColor(square);
        if (!color)
            return;
        const role = this.getRole(square);
        const promoted = this.promoted.has(square);
        return { color, role, promoted };
    }
    take(square) {
        const piece = this.get(square);
        if (piece) {
            this.occupied = this.occupied.without(square);
            this[piece.color] = this[piece.color].without(square);
            this[piece.role] = this[piece.role].without(square);
            if (piece.promoted)
                this.promoted = this.promoted.without(square);
        }
        return piece;
    }
    set(square, piece) {
        const old = this.take(square);
        this.occupied = this.occupied.with(square);
        this[piece.color] = this[piece.color].with(square);
        this[piece.role] = this[piece.role].with(square);
        if (piece.promoted)
            this.promoted = this.promoted.with(square);
        return old;
    }
    has(square) {
        return this.occupied.has(square);
    }
    *[Symbol.iterator]() {
        for (const square of this.occupied) {
            yield [square, this.get(square)];
        }
    }
    pieces(color, role) {
        return this[color].intersect(this[role]);
    }
    rooksAndQueens() {
        return this.rook.union(this.queen);
    }
    bishopsAndQueens() {
        return this.bishop.union(this.queen);
    }
    kingOf(color) {
        return this.king.intersect(this[color]).diff(this.promoted).singleSquare();
    }
}
exports.Board = Board;
//# sourceMappingURL=board.js.map